# Gray Box Testing Dataset Module

class GrayBoxTestingDataset:
    def __init__(self):
        self.definition = "Gray-box testing is a method of software testing that involves having partial knowledge of the internal workings of the application, combining both black-box and white-box testing techniques."
        self.techniques = [
            "Matrix Testing",
            "Regression Testing",
            "Pattern Testing",
            "Orthogonal Array Testing"
        ]
        self.advantages = [
            "Combined benefits of black-box and white-box testing",
            "Non-intrusive",
            "Intelligent Test Authoring",
            "Unbiased Testing"
        ]
        self.disadvantages = [
            "Partial code coverage",
            "Defect Identification challenges"
        ]
        self.applications = [
            "Web Application Testing",
            "Network Security Testing",
            "Mobile Application Testing",
            "API Testing"
        ]
        self.technical_guidelines = {}

    def get_definition(self):
        return self.definition

    def get_techniques(self):
        return self.techniques

    def get_advantages(self):
        return self.advantages

    def get_disadvantages(self):
        return self.disadvantages

    def get_applications(self):
        return self.applications

    def get_technical_guidelines(self):
        self.technical_guidelines = {
            "Tools": [
                "Selenium",
                "JMeter",
                "Postman",
                "SoapUI",
                "TestComplete"
            ],
            "Techniques": [
                "Input validation testing",
                "Output validation testing",
                "Error handling testing",
                "Interface testing",
                "Performance testing"
            ],
            "Best Practices": [
                "Define clear test objectives",
                "Create comprehensive test cases",
                "Use a variety of test design techniques",
                "Maintain test case independence",
                "Regularly update test cases"
            ]
        }
        return self.technical_guidelines

    def generate_sample_data(self):
        sample_data = []
        sample_data.append(f"Definition: {self.get_definition()}\n")
        sample_data.append(f"Techniques: {', '.join(self.get_techniques())}\n")
        sample_data.append(f"Advantages: {', '.join(self.get_advantages())}\n")
        sample_data.append(f"Disadvantages: {', '.join(self.get_disadvantages())}\n")
        sample_data.append(f"Applications: {', '.join(self.get_applications())}\n")

        guidelines = self.get_technical_guidelines()
        for category, items in guidelines.items():
            sample_data.append(f"{category}: {', '.join(items)}\n")

        return "\n".join(sample_data)

    def generate(self):
        import random
        categories = ["definition", "technique", "advantage", "disadvantage", "application", "tool", "technique_guideline", "best_practice"]
        category = random.choice(categories)

        if category == "definition":
            question = "What is gray-box testing?"
            answer = self.get_definition()
        elif category == "technique":
            technique = random.choice(self.get_techniques())
            question = f"What is the purpose of {technique} in gray-box testing?"
            answer = f"{technique} is a technique used in gray-box testing to evaluate specific aspects of the software's functionality."
        elif category == "advantage":
            advantage = random.choice(self.get_advantages())
            question = "What is one of the key benefits of gray-box testing?"
            answer = advantage
        elif category == "disadvantage":
            disadvantage = random.choice(self.get_disadvantages())
            question = "What is one of the key disadvantages of gray-box testing?"
            answer = disadvantage
        elif category == "application":
            application = random.choice(self.get_applications())
            question = f"In which area is gray-box testing commonly applied?"
            answer = f"Gray-box testing is commonly applied in {application}."
        elif category == "tool":
            tool = random.choice(self.get_technical_guidelines()["Tools"])
            question = f"What is the purpose of using {tool} in gray-box testing?"
            answer = f"{tool} is a tool commonly used in gray-box testing to automate and streamline the testing process."
        elif category == "technique_guideline":
            technique = random.choice(self.get_technical_guidelines()["Techniques"])
            question = f"What is the importance of {technique} in gray-box testing?"
            answer = f"{technique} is an important technique in gray-box testing to ensure thorough evaluation of the software's functionality."
        else:  # best_practice
            practice = random.choice(self.get_technical_guidelines()["Best Practices"])
            question = f"Why is '{practice}' considered a best practice in gray-box testing?"
            answer = f"'{practice}' is a best practice in gray-box testing because it helps improve the effectiveness and efficiency of the testing process."

        return (question, answer)

# Example usage
if __name__ == "__main__":
    gray_box_testing = GrayBoxTestingDataset()
    print("Gray Box Testing Definition:", gray_box_testing.get_definition())
    print("\nTechniques:", gray_box_testing.get_techniques())
    print("\nAdvantages:", gray_box_testing.get_advantages())
    print("\nDisadvantages:", gray_box_testing.get_disadvantages())
    print("\nApplications:", gray_box_testing.get_applications())
    print("\nTechnical Guidelines:", gray_box_testing.get_technical_guidelines())
    print("\nSample Data:")
    print(gray_box_testing.generate_sample_data())
    print("\nLLM Training Data Examples:")
    for _ in range(5):
        question, answer = gray_box_testing.generate()
        print(f"\nQ: {question}")
        print(f"A: {answer}")
