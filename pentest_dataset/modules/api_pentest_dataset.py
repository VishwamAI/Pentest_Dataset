# API Penetration Testing Dataset Module

class APIPenTestDataset:
    def __init__(self):
        self.methodologies = [
            "OWASP API Security Top 10",
            "PTES Adapted for API",
            "Custom API Penetration Testing Approach"
        ]
        self.owasp_top_10 = [
            "API1:2023 Broken Object Level Authorization",
            "API2:2023 Broken Authentication",
            "API3:2023 Broken Object Property Level Authorization",
            "API4:2023 Unrestricted Resource Consumption",
            "API5:2023 Broken Function Level Authorization",
            "API6:2023 Unrestricted Access to Sensitive Business Flows",
            "API7:2023 Server Side Request Forgery",
            "API8:2023 Security Misconfiguration",
            "API9:2023 Improper Inventory Management",
            "API10:2023 Unsafe Consumption of APIs"
        ]
        self.ptes_sections = [
            "Pre-engagement Interactions",
            "Intelligence Gathering",
            "Threat Modeling",
            "Vulnerability Analysis",
            "Exploitation",
            "Post Exploitation",
            "Reporting"
        ]
        self.tools_and_techniques = {}
        self.test_cases = {}
        self.best_practices = {}

    def get_methodologies(self):
        return self.methodologies

    def get_owasp_top_10(self):
        return self.owasp_top_10

    def get_ptes_sections(self):
        return self.ptes_sections

    def get_vulnerability_details(self, vulnerability):
        details = {
            "API1:2023 Broken Object Level Authorization": "Details about Broken Object Level Authorization...",
            "API2:2023 Broken Authentication": "Details about Broken Authentication...",
            "API3:2023 Broken Object Property Level Authorization": "Details about Broken Object Property Level Authorization...",
            "API4:2023 Unrestricted Resource Consumption": "Details about Unrestricted Resource Consumption...",
            "API5:2023 Broken Function Level Authorization": "Details about Broken Function Level Authorization...",
            "API6:2023 Unrestricted Access to Sensitive Business Flows": "Details about Unrestricted Access to Sensitive Business Flows...",
            "API7:2023 Server Side Request Forgery": "Details about Server Side Request Forgery...",
            "API8:2023 Security Misconfiguration": "Details about Security Misconfiguration...",
            "API9:2023 Improper Inventory Management": "Details about Improper Inventory Management...",
            "API10:2023 Unsafe Consumption of APIs": "Details about Unsafe Consumption of APIs..."
        }
        return details.get(vulnerability, "Details not available.")

    def get_tools_and_techniques(self):
        self.tools_and_techniques = {
            "Tools": [
                "Postman",
                "Burp Suite",
                "OWASP ZAP",
                "SoapUI",
                "Fiddler"
            ],
            "Techniques": [
                "API Fuzzing",
                "Parameter Tampering",
                "Session Hijacking",
                "Injection Attacks",
                "Replay Attacks"
            ]
        }
        return self.tools_and_techniques

    def get_test_cases(self):
        self.test_cases = {
            "API1:2023 Broken Object Level Authorization": [
                "Test unauthorized access to other users' data",
                "Test access control checks for object-level operations"
            ],
            "API2:2023 Broken Authentication": [
                "Test for default credentials",
                "Test for weak password policies"
            ],
            "API3:2023 Broken Object Property Level Authorization": [
                "Test unauthorized access to object properties",
                "Test access control checks for property-level operations"
            ],
            "API4:2023 Unrestricted Resource Consumption": [
                "Test for rate limiting",
                "Test for resource exhaustion attacks"
            ],
            "API5:2023 Broken Function Level Authorization": [
                "Test unauthorized access to sensitive functions",
                "Test access control checks for function-level operations"
            ],
            "API6:2023 Unrestricted Access to Sensitive Business Flows": [
                "Test for business logic flaws",
                "Test for bypassing business rules"
            ],
            "API7:2023 Server Side Request Forgery": [
                "Test for SSRF vulnerabilities",
                "Test for improper URL handling"
            ],
            "API8:2023 Security Misconfiguration": [
                "Test for default configurations",
                "Test for unnecessary features enabled"
            ],
            "API9:2023 Improper Inventory Management": [
                "Test for outdated API versions",
                "Test for exposed API documentation"
            ],
            "API10:2023 Unsafe Consumption of APIs": [
                "Test for insecure API consumption",
                "Test for improper input validation"
            ]
        }
        return self.test_cases

    def get_best_practices(self):
        self.best_practices = {
            "Authentication": [
                "Use strong authentication mechanisms",
                "Implement multi-factor authentication"
            ],
            "Authorization": [
                "Enforce proper access controls",
                "Use role-based access control"
            ],
            "Input Validation": [
                "Validate all inputs",
                "Use whitelisting for input validation"
            ],
            "Error Handling": [
                "Do not expose detailed error messages",
                "Log errors securely"
            ],
            "Logging and Monitoring": [
                "Implement comprehensive logging",
                "Monitor API usage for anomalies"
            ]
        }
        return self.best_practices

    def generate_sample_data(self):
        sample_data = []
        for methodology in self.methodologies:
            sample_data.append(f"Methodology: {methodology}\n")

        for vulnerability in self.owasp_top_10:
            details = self.get_vulnerability_details(vulnerability)
            sample_data.append(f"Vulnerability: {vulnerability}\nDetails: {details}\n")

        for section in self.ptes_sections:
            sample_data.append(f"PTES Section: {section}\n")

        tools_and_techniques = self.get_tools_and_techniques()
        for category, items in tools_and_techniques.items():
            sample_data.append(f"Category: {category}\nItems: {', '.join(items)}\n")

        test_cases = self.get_test_cases()
        for vulnerability, cases in test_cases.items():
            sample_data.append(f"Vulnerability: {vulnerability}\nTest Cases: {', '.join(cases)}\n")

        best_practices = self.get_best_practices()
        for category, practices in best_practices.items():
            sample_data.append(f"Category: {category}\nBest Practices: {', '.join(practices)}\n")

        return "\n".join(sample_data)

# Example usage
if __name__ == "__main__":
    api_pen_test = APIPenTestDataset()
    print("API Penetration Testing Methodologies:", api_pen_test.get_methodologies())
    print("\nOWASP API Security Top 10:", api_pen_test.get_owasp_top_10())
    print("\nPTES Sections for API Penetration Testing:", api_pen_test.get_ptes_sections())
    print("\nDetails of API1:2023 Broken Object Level Authorization:", api_pen_test.get_vulnerability_details("API1:2023 Broken Object Level Authorization"))
    print("\nTools and Techniques:", api_pen_test.get_tools_and_techniques())
    print("\nTest Cases for API1:2023 Broken Object Level Authorization:", api_pen_test.get_test_cases().get("API1:2023 Broken Object Level Authorization"))
    print("\nBest Practices for Authentication:", api_pen_test.get_best_practices().get("Authentication"))
    print("\nSample Data:")
    print(api_pen_test.generate_sample_data())
