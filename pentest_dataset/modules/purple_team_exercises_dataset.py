# Purple Team Exercises Dataset Module

class PurpleTeamExercisesDataset:
    def __init__(self):
        self.types_of_purple_teams = [
            "Ad-hoc",
            "Operationalized",
            "Dedicated"
        ]
        self.components_of_purple_team = [
            "Cyber Threat Intelligence (CTI)",
            "Red Team",
            "Blue Team"
        ]
        self.goals_and_objectives = [
            "Improve detection and response capabilities",
            "Enhance collaboration between Red and Blue teams",
            "Identify and mitigate security gaps",
            "Validate security controls and processes"
        ]
        self.phases_of_exercise = [
            "Planning",
            "Execution",
            "Lessons Learned"
        ]
        self.technical_guidelines = {}

    def get_types_of_purple_teams(self):
        return self.types_of_purple_teams

    def get_components_of_purple_team(self):
        return self.components_of_purple_team

    def get_goals_and_objectives(self):
        return self.goals_and_objectives

    def get_phases_of_exercise(self):
        return self.phases_of_exercise

    def get_phase_details(self, phase):
        details = {
            "Planning": "Define the scope, objectives, and logistics of the Purple Team Exercise.",
            "Execution": "Conduct the exercise, including attack simulations, monitoring, and response activities.",
            "Lessons Learned": "Analyze the results, identify areas for improvement, and update security strategies and controls."
        }
        return details.get(phase, "Details not available.")

    def get_technical_guidelines(self):
        self.technical_guidelines = {
            "Tools": [
                "SIEM systems",
                "Intrusion detection/prevention systems (IDS/IPS)",
                "Vulnerability scanners",
                "Log analysis tools",
                "Network monitoring tools",
                "Threat intelligence platforms",
                "Incident response platforms",
                "Digital forensics tools"
            ],
            "Techniques": [
                "Continuous monitoring and logging",
                "Vulnerability scanning",
                "Threat intelligence gathering",
                "Incident response and management",
                "Digital forensics analysis",
                "Patch management",
                "Security audits",
                "Adversary emulation"
            ],
            "Best Practices": [
                "Regular security assessments",
                "Continuous monitoring and logging",
                "Timely patch management",
                "Employee security awareness training",
                "Incident response planning and testing",
                "Threat intelligence integration",
                "Collaboration with red teams",
                "Regular security control testing"
            ]
        }
        return self.technical_guidelines

    def generate_sample_data(self):
        sample_data = []
        sample_data.append("Types of Purple Teams:\n" + "\n".join(self.types_of_purple_teams) + "\n")
        sample_data.append("Components of Purple Team:\n" + "\n".join(self.components_of_purple_team) + "\n")
        sample_data.append("Goals and Objectives:\n" + "\n".join(self.goals_and_objectives) + "\n")
        sample_data.append("Phases of Exercise:\n" + "\n".join(self.phases_of_exercise) + "\n")

        for phase in self.phases_of_exercise:
            details = self.get_phase_details(phase)
            sample_data.append(f"Phase: {phase}\nDetails: {details}\n")

        guidelines = self.get_technical_guidelines()
        for category, items in guidelines.items():
            sample_data.append(f"Category: {category}\nItems: {', '.join(items)}\n")

        return "\n".join(sample_data)

    def generate(self):
        import random
        category = random.choice(["type", "component", "goal", "phase", "tool", "technique", "best_practice"])

        if category == "type":
            type_of_team = random.choice(self.types_of_purple_teams)
            question = f"What is the purpose of the '{type_of_team}' type of Purple Team?"
            answer = f"The '{type_of_team}' type of Purple Team focuses on specific aspects of improving security through collaboration between Red and Blue teams."
        elif category == "component":
            component = random.choice(self.components_of_purple_team)
            question = f"What is the role of the '{component}' in a Purple Team?"
            answer = f"The '{component}' plays a crucial role in enhancing the overall security posture by contributing their expertise and collaborating with other team members."
        elif category == "goal":
            goal = random.choice(self.goals_and_objectives)
            question = f"What is the objective '{goal}' in Purple Team Exercises?"
            answer = f"The objective '{goal}' aims to achieve specific security improvements and validate the effectiveness of security measures."
        elif category == "phase":
            phase = random.choice(self.phases_of_exercise)
            question = f"What is the purpose of the '{phase}' phase in Purple Team Exercises?"
            answer = self.get_phase_details(phase)
        elif category == "tool":
            tool = random.choice(self.technical_guidelines["Tools"])
            question = f"What is the purpose of using '{tool}' in Purple Team Exercises?"
            answer = f"'{tool}' is used for various purposes in Purple Team Exercises, such as monitoring, detection, and analysis."
        elif category == "technique":
            technique = random.choice(self.technical_guidelines["Techniques"])
            question = f"How is the '{technique}' technique applied in Purple Team Exercises?"
            answer = f"The '{technique}' technique is used to enhance security measures and identify potential threats in the target environment."
        else:  # best_practice
            practice = random.choice(self.technical_guidelines["Best Practices"])
            question = f"Why is '{practice}' considered a best practice in Purple Team Exercises?"
            answer = f"This best practice ensures that Purple Team Exercises are conducted effectively, ethically, and provide valuable results."

        return (question, answer)

# Example usage
if __name__ == "__main__":
    purple_team_exercises = PurpleTeamExercisesDataset()
    print("Types of Purple Teams:", purple_team_exercises.get_types_of_purple_teams())
    print("\nComponents of Purple Team:", purple_team_exercises.get_components_of_purple_team())
    print("\nGoals and Objectives:", purple_team_exercises.get_goals_and_objectives())
    print("\nPhases of Exercise:", purple_team_exercises.get_phases_of_exercise())
    print("\nDetails of Planning Phase:", purple_team_exercises.get_phase_details("Planning"))
    print("\nTechnical Guidelines:", purple_team_exercises.get_technical_guidelines())
    print("\nSample Data:")
    print(purple_team_exercises.generate_sample_data())
    print("\nLLM Training Data Examples:")
    for _ in range(5):
        question, answer = purple_team_exercises.generate()
        print(f"\nQ: {question}")
        print(f"A: {answer}")
