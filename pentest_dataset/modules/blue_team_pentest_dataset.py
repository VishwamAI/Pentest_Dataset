# Blue Team Penetration Testing Dataset Module

import random

class BlueTeamPenTestDataset:
    def __init__(self):
        self.methodologies = [
            "Continuous monitoring",
            "Vulnerability assessments",
            "Cyber threat intelligence research",
            "Attack simulations and adversary emulation",
            "Prioritized remediation actions",
            "Patch management",
            "Digital forensics investigations",
            "Incident response"
        ]
        self.objectives = [
            "Identify and mitigate vulnerabilities",
            "Anticipate and respond to threats",
            "Continuously improve security infrastructure",
            "Conduct regular security audits",
            "Educate the organization about potential cyber threats"
        ]
        self.skill_sets = [
            "Cybersecurity fundamentals",
            "Systems and network knowledge",
            "Threat intelligence",
            "Security analysis",
            "Incident response",
            "Forensic analysis",
            "System hardening",
            "Security tools expertise"
        ]
        self.tools_and_techniques = {
            "Tools": [
                "SIEM systems",
                "Intrusion detection/prevention systems (IDS/IPS)",
                "Vulnerability scanners",
                "Log analysis tools",
                "Network monitoring tools",
                "Threat intelligence platforms",
                "Incident response platforms",
                "Digital forensics tools"
            ],
            "Techniques": [
                "Continuous monitoring and logging",
                "Vulnerability scanning",
                "Threat intelligence gathering",
                "Incident response and management",
                "Digital forensics analysis",
                "Patch management",
                "Security audits",
                "Adversary emulation"
            ]
        }
        self.best_practices = [
            "Regular security assessments",
            "Continuous monitoring and logging",
            "Timely patch management",
            "Employee security awareness training",
            "Incident response planning and testing",
            "Threat intelligence integration",
            "Collaboration with red teams",
            "Regular security control testing"
        ]

    def get_methodologies(self):
        return self.methodologies

    def get_objectives(self):
        return self.objectives

    def get_skill_sets(self):
        return self.skill_sets

    def get_tools_and_techniques(self):
        return self.tools_and_techniques

    def get_best_practices(self):
        return self.best_practices

    def get_methodology_details(self, methodology):
        details = {
            "Continuous monitoring": "Ongoing observation and analysis of network and system activities to identify potential security incidents in real-time.",
            "Vulnerability assessments": "Systematic examination of systems and networks to identify security weaknesses and vulnerabilities.",
            "Cyber threat intelligence research": "Gathering and analyzing information about current and emerging threats to inform defensive measures.",
            "Attack simulations and adversary emulation": "Simulating real-world attack scenarios to test the effectiveness of security controls and response capabilities.",
            "Prioritized remediation actions": "Identifying and addressing the most critical vulnerabilities and threats based on risk assessment.",
            "Patch management": "Regularly updating software and systems to fix security vulnerabilities and improve overall security posture.",
            "Digital forensics investigations": "Analyzing digital evidence to investigate and respond to security incidents.",
            "Incident response": "Coordinated approach to addressing and managing the aftermath of a security breach or cyberattack."
        }
        return details.get(methodology, "Details not available.")

    def generate_sample_data(self):
        sample_data = []
        for methodology in self.methodologies:
            details = self.get_methodology_details(methodology)
            sample_data.append(f"Methodology: {methodology}\nDetails: {details}\n")

        sample_data.append("\nObjectives:\n" + "\n".join(self.objectives))
        sample_data.append("\nSkill Sets:\n" + "\n".join(self.skill_sets))

        tools_and_techniques = self.get_tools_and_techniques()
        for category, items in tools_and_techniques.items():
            sample_data.append(f"Category: {category}\nItems: {', '.join(items)}\n")

        sample_data.append("\nBest Practices:\n" + "\n".join(self.best_practices))

        return "\n".join(sample_data)

    def generate(self):
        category = random.choice(["methodology", "objective", "skill_set", "tool", "technique", "best_practice"])

        if category == "methodology":
            methodology = random.choice(self.methodologies)
            question = f"What is the purpose of the '{methodology}' methodology in Blue Team Penetration Testing?"
            answer = self.get_methodology_details(methodology)
        elif category == "objective":
            objective = random.choice(self.objectives)
            question = f"What is the objective '{objective}' in Blue Team Penetration Testing?"
            answer = f"The objective '{objective}' focuses on achieving specific security goals within the organization."
        elif category == "skill_set":
            skill_set = random.choice(self.skill_sets)
            question = f"What is the importance of the skill set '{skill_set}' in Blue Team Penetration Testing?"
            answer = f"The skill set '{skill_set}' is crucial for effectively performing Blue Team activities and ensuring robust security measures."
        elif category == "tool":
            tool = random.choice(self.tools_and_techniques["Tools"])
            question = f"What is the purpose of using '{tool}' in Blue Team Penetration Testing?"
            answer = f"'{tool}' is used for various purposes in Blue Team Penetration Testing, such as monitoring, detection, and analysis."
        elif category == "technique":
            technique = random.choice(self.tools_and_techniques["Techniques"])
            question = f"How is the '{technique}' technique applied in Blue Team Penetration Testing?"
            answer = f"The '{technique}' technique is used to enhance security measures and identify potential threats in the target environment."
        else:  # best_practice
            practice = random.choice(self.best_practices)
            question = f"Why is '{practice}' considered a best practice in Blue Team Penetration Testing?"
            answer = f"This best practice ensures that Blue Team Penetration Testing is conducted effectively, ethically, and provides valuable results."

        return (question, answer)

# Example usage
if __name__ == "__main__":
    blue_team_pen_test = BlueTeamPenTestDataset()
    print("Blue Team Penetration Testing Methodologies:", blue_team_pen_test.get_methodologies())
    print("\nDetails of Continuous Monitoring:", blue_team_pen_test.get_methodology_details("Continuous monitoring"))
    print("\nObjectives:", blue_team_pen_test.get_objectives())
    print("\nSkill Sets:", blue_team_pen_test.get_skill_sets())
    print("\nTools and Techniques:", blue_team_pen_test.get_tools_and_techniques())
    print("\nBest Practices:", blue_team_pen_test.get_best_practices())
    print("\nSample Data:")
    print(blue_team_pen_test.generate_sample_data())
    print("\nLLM Training Data Examples:")
    for _ in range(5):
        question, answer = blue_team_pen_test.generate()
        print(f"\nQ: {question}")
        print(f"A: {answer}")
