# Physical Penetration Testing Dataset Module

import random

class PhysicalPenTest:
    def __init__(self):
        self.methodologies = []
        self.tools_and_techniques = {}
        self.test_cases = {}
        self.best_practices = {}
        self.populate_methodologies()
        self.populate_tools_and_techniques()
        self.populate_test_cases()
        self.populate_best_practices()

    def populate_methodologies(self):
        self.methodologies = [
            "Mapping Entrances and Perimeters",
            "Lock Picking",
            "Accessing Sensitive Information",
            "Bypassing Security Measures",
            "Custom Physical Penetration Testing Approach"
        ]

    def populate_tools_and_techniques(self):
        self.tools_and_techniques = {
            "Tools": [
                "Lock picking sets",
                "Bypass tools (e.g., shims, bump keys)",
                "Surveillance equipment",
                "Social engineering tools",
                "RFID/NFC cloning devices"
            ],
            "Techniques": [
                "Lock picking",
                "Tailgating",
                "Dumpster diving",
                "Social engineering",
                "RFID/NFC cloning"
            ]
        }

    def populate_test_cases(self):
        self.test_cases = {
            "Mapping Entrances and Perimeters": [
                "Identify all entrances and exits",
                "Map the perimeter and identify weak points"
            ],
            "Lock Picking": [
                "Test various locks with lock picking tools",
                "Evaluate the effectiveness of lock picking techniques"
            ],
            "Accessing Sensitive Information": [
                "Locate and access sensitive documents",
                "Test access to servers and workstations"
            ],
            "Bypassing Security Measures": [
                "Test bypassing alarms and cameras",
                "Evaluate the effectiveness of social engineering techniques"
            ]
        }

    def populate_best_practices(self):
        self.best_practices = {
            "Planning": [
                "Obtain proper authorization before testing",
                "Define clear objectives and scope"
            ],
            "Execution": [
                "Use a combination of tools and techniques",
                "Document all findings and steps"
            ],
            "Reporting": [
                "Provide detailed reports with recommendations",
                "Include risk assessments and mitigation strategies"
            ]
        }

    def get_methodology_details(self, methodology):
        details = {
            "Mapping Entrances and Perimeters": "Identifying and mapping all entrances, exits, and perimeters of the target facility.",
            "Lock Picking": "Using lock picking tools and techniques to gain unauthorized access to restricted areas.",
            "Accessing Sensitive Information": "Locating and accessing sensitive information stored within the facility, such as documents, servers, and workstations.",
            "Bypassing Security Measures": "Using tools and techniques to bypass physical security measures, such as alarms, cameras, and guards.",
            "Custom Physical Penetration Testing Approach": "A tailored approach that combines various methodologies to simulate a realistic physical attack on the target facility."
        }
        return details.get(methodology, "Details not available.")

    def generate_sample_data(self):
        sample_data = []
        for methodology in self.methodologies:
            details = self.get_methodology_details(methodology)
            sample_data.append(f"Methodology: {methodology}\nDetails: {details}\n")

        for category, items in self.tools_and_techniques.items():
            sample_data.append(f"Category: {category}\nItems: {', '.join(items)}\n")

        for methodology, cases in self.test_cases.items():
            sample_data.append(f"Methodology: {methodology}\nTest Cases: {', '.join(cases)}\n")

        for category, practices in self.best_practices.items():
            sample_data.append(f"Category: {category}\nBest Practices: {', '.join(practices)}\n")

        return "\n".join(sample_data)

    def generate(self):
        category = random.choice(["methodology", "tool", "technique", "test_case", "best_practice"])

        if category == "methodology":
            methodology = random.choice(self.methodologies)
            question = f"What is the purpose of the '{methodology}' methodology in physical penetration testing?"
            answer = self.get_methodology_details(methodology)
        elif category == "tool":
            tool = random.choice(self.tools_and_techniques["Tools"])
            question = f"What is the purpose of using '{tool}' in physical penetration testing?"
            answer = f"'{tool}' is used for various purposes in physical penetration testing, such as gaining unauthorized access or gathering information."
        elif category == "technique":
            technique = random.choice(self.tools_and_techniques["Techniques"])
            question = f"How is the '{technique}' technique applied in physical penetration testing?"
            answer = f"The '{technique}' technique is used to test physical security measures and identify vulnerabilities in the target facility."
        elif category == "test_case":
            methodology = random.choice(list(self.test_cases.keys()))
            test_case = random.choice(self.test_cases[methodology])
            question = f"What is the purpose of the test case '{test_case}' in the '{methodology}' methodology?"
            answer = f"This test case is used to evaluate the effectiveness of physical security measures related to {methodology.lower()}."
        else:  # best_practice
            category = random.choice(list(self.best_practices.keys()))
            practice = random.choice(self.best_practices[category])
            question = f"Why is '{practice}' considered a best practice in the '{category}' phase of physical penetration testing?"
            answer = f"This best practice ensures that the physical penetration test is conducted effectively, ethically, and provides valuable results in the {category.lower()} phase."

        return (question, answer)

# Example usage
if __name__ == "__main__":
    physical_pen_test = PhysicalPenTest()
    print("Sample Data:")
    print(physical_pen_test.generate_sample_data())
    print("\nLLM Training Data Examples:")
    for _ in range(5):
        question, answer = physical_pen_test.generate()
        print(f"\nQ: {question}")
        print(f"A: {answer}")
