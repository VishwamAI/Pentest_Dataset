# Mobile Application Penetration Testing Dataset Module

class MobileAppPenTestDataset:
    def __init__(self):
        self.categories = [
            "Android Testing Setup",
            "Host Device",
            "Testing Device",
            "Getting Privileged Access",
            "Root Detection"
        ]
        self.technical_guidelines = {}

    def get_categories(self):
        return self.categories

    def get_category_details(self, category):
        details = {
            "Android Testing Setup": "Setting up a fully functioning test environment on machines running Windows, Linux, or macOS.",
            "Host Device": "Requirements for the host machine, including Android Studio, SDK tools, and optional components like Android NDK.",
            "Testing Device": "Considerations for choosing between physical devices and emulators for testing, including pros and cons of each approach.",
            "Getting Privileged Access": "Methods and considerations for rooting Android devices, including the use of Magisk for systemless rooting.",
            "Root Detection": "Overview of root detection methods and techniques to bypass them for testing purposes."
        }
        return details.get(category, "Details not available.")

    def get_technical_guidelines(self):
        self.technical_guidelines = {
            "Host Setup": [
                "Install Android Studio",
                "Install latest SDK tools and platform tools",
                "Install Android NDK (optional)",
                "Install Scrcpy for device control (optional)"
            ],
            "Physical Device Setup": [
                "Enable Developer Mode",
                "Enable USB debugging",
                "Consider using Google Pixel devices or Android One devices",
                "Check for LineageOS support"
            ],
            "Emulator Setup": [
                "Use Android Virtual Device (AVD) Manager",
                "Consider commercial options like Genymotion or Corellium",
                "Enable hardware emulation features"
            ],
            "Rooting Techniques": [
                "Unlock bootloader",
                "Use Magisk for systemless root",
                "Consider custom ROMs like LineageOS"
            ],
            "Testing Tools": [
                "ADB (Android Debug Bridge)",
                "Frida",
                "MobSF (Mobile Security Framework)",
                "Drozer",
                "OWASP ZAP"
            ]
        }
        return self.technical_guidelines

    def generate_sample_data(self):
        sample_data = []
        for category in self.categories:
            details = self.get_category_details(category)
            sample_data.append(f"Category: {category}\nDetails: {details}\n")

        guidelines = self.get_technical_guidelines()
        for category, items in guidelines.items():
            sample_data.append(f"Category: {category}\nItems: {', '.join(items)}\n")

        return "\n".join(sample_data)

# Example usage
if __name__ == "__main__":
    mobile_app_pentest = MobileAppPenTestDataset()
    print("Mobile Application Penetration Testing Categories:", mobile_app_pentest.get_categories())
    print("\nDetails of Android Testing Setup:", mobile_app_pentest.get_category_details("Android Testing Setup"))
    print("\nTechnical Guidelines:", mobile_app_pentest.get_technical_guidelines())
    print("\nSample Data:")
    print(mobile_app_pentest.generate_sample_data())
