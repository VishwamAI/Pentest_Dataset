# White Box Testing Dataset Module

import random

class WhiteBoxTestingDataset:
    def __init__(self):
        self.definition = "White-box testing is a method of software testing that examines the internal structures or workings of an application, as opposed to its functionality (black-box testing)."
        self.test_design_techniques = [
            "Statement Coverage",
            "Branch Coverage",
            "Path Coverage",
            "Condition Coverage",
            "Loop Coverage"
        ]
        self.advantages = [
            "Thorough testing of internal structures",
            "Early detection of hidden errors",
            "Optimization of code",
            "Verification of outputs"
        ]
        self.disadvantages = [
            "Requires knowledge of internal code",
            "Time-consuming",
            "Not suitable for large systems",
            "May miss unimplemented parts of the specification"
        ]
        self.levels_of_application = [
            "Unit Testing",
            "Integration Testing",
            "System Testing",
            "Acceptance Testing"
        ]
        self.technical_guidelines = {}

    def get_definition(self):
        return self.definition

    def get_test_design_techniques(self):
        return self.test_design_techniques

    def get_advantages(self):
        return self.advantages

    def get_disadvantages(self):
        return self.disadvantages

    def get_levels_of_application(self):
        return self.levels_of_application

    def get_technical_guidelines(self):
        self.technical_guidelines = {
            "Tools": [
                "JUnit",
                "NUnit",
                "CppUnit",
                "PyTest",
                "Emma"
            ],
            "Techniques": [
                "Code coverage analysis",
                "Static code analysis",
                "Dynamic code analysis",
                "Mutation testing",
                "Fault injection"
            ],
            "Best Practices": [
                "Understand the internal structure of the application",
                "Create comprehensive test cases",
                "Use automated testing tools",
                "Regularly update test cases",
                "Review and optimize code"
            ]
        }
        return self.technical_guidelines

    def generate_sample_data(self):
        sample_data = []
        sample_data.append(f"Definition: {self.get_definition()}\n")
        sample_data.append(f"Test Design Techniques: {', '.join(self.get_test_design_techniques())}\n")
        sample_data.append(f"Advantages: {', '.join(self.get_advantages())}\n")
        sample_data.append(f"Disadvantages: {', '.join(self.get_disadvantages())}\n")
        sample_data.append(f"Levels of Application: {', '.join(self.get_levels_of_application())}\n")

        guidelines = self.get_technical_guidelines()
        for category, items in guidelines.items():
            sample_data.append(f"{category}: {', '.join(items)}\n")

        return "\n".join(sample_data)

    def generate(self):
        categories = ["definition", "test_design_technique", "advantage", "disadvantage", "level_of_application", "tool", "technique", "best_practice"]
        category = random.choice(categories)

        if category == "definition":
            question = "What is white-box testing?"
            answer = self.get_definition()
        elif category == "test_design_technique":
            technique = random.choice(self.test_design_techniques)
            question = f"What is the purpose of {technique} in white-box testing?"
            answer = f"{technique} is a test design technique used in white-box testing to evaluate specific aspects of the software's internal structure."
        elif category == "advantage":
            advantage = random.choice(self.advantages)
            question = "What is one of the key benefits of white-box testing?"
            answer = advantage
        elif category == "disadvantage":
            disadvantage = random.choice(self.disadvantages)
            question = "What is one of the key disadvantages of white-box testing?"
            answer = disadvantage
        elif category == "level_of_application":
            level = random.choice(self.levels_of_application)
            question = f"At which level is white-box testing applied?"
            answer = f"White-box testing is applied at the {level} level."
        elif category == "tool":
            tool = random.choice(self.get_technical_guidelines()["Tools"])
            question = f"What is the purpose of using {tool} in white-box testing?"
            answer = f"{tool} is a tool commonly used in white-box testing to automate and streamline the testing process."
        elif category == "technique":
            technique = random.choice(self.get_technical_guidelines()["Techniques"])
            question = f"What is the importance of {technique} in white-box testing?"
            answer = f"{technique} is an important technique in white-box testing to ensure thorough evaluation of the software's internal structure."
        else:  # best_practice
            practice = random.choice(self.get_technical_guidelines()["Best Practices"])
            question = f"Why is '{practice}' considered a best practice in white-box testing?"
            answer = f"'{practice}' is a best practice in white-box testing because it helps improve the effectiveness and efficiency of the testing process."

        return (question, answer)

# Example usage
if __name__ == "__main__":
    white_box_testing = WhiteBoxTestingDataset()
    print("White Box Testing Definition:", white_box_testing.get_definition())
    print("\nTest Design Techniques:", white_box_testing.get_test_design_techniques())
    print("\nAdvantages:", white_box_testing.get_advantages())
    print("\nDisadvantages:", white_box_testing.get_disadvantages())
    print("\nLevels of Application:", white_box_testing.get_levels_of_application())
    print("\nTechnical Guidelines:", white_box_testing.get_technical_guidelines())
    print("\nSample Data:")
    print(white_box_testing.generate_sample_data())
    print("\nLLM Training Data Examples:")
    for _ in range(5):
        question, answer = white_box_testing.generate()
        print(f"\nQ: {question}")
        print(f"A: {answer}")
