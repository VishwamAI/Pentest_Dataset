# Red Team Penetration Testing Dataset Module

class RedTeamPenTestDataset:
    def __init__(self):
        self.stages = [
            "Planning",
            "Discovery",
            "Exploitation",
            "Reporting"
        ]
        self.methodologies = [
            "Full-scope Red Team Assessment",
            "Targeted Red Team Assessment",
            "Adversary Emulation"
        ]
        self.tools_and_techniques = {}
        self.test_cases = {}
        self.best_practices = []
        self.populate_tools_and_techniques()
        self.populate_test_cases()
        self.populate_best_practices()

    def get_stages(self):
        return self.stages

    def get_stage_details(self, stage):
        details = {
            "Planning": "Defining the scope, objectives, and logistics of the Red Team Assessment.",
            "Discovery": "Gathering information about the target environment and identifying potential vulnerabilities.",
            "Exploitation": "Attempting to exploit identified vulnerabilities to gain unauthorized access or control.",
            "Reporting": "Documenting findings, providing recommendations, and presenting results to the client."
        }
        return details.get(stage, "Details not available.")

    def get_methodologies(self):
        return self.methodologies

    def populate_tools_and_techniques(self):
        self.tools_and_techniques = {
            "Network Scanning Tools": [
                "Nmap",
                "Masscan"
            ],
            "Exploitation Frameworks": [
                "Metasploit",
                "Cobalt Strike"
            ],
            "Social Engineering Tools": [
                "SET (Social Engineering Toolkit)",
                "GoPhish"
            ],
            "Custom Malware and Backdoors": [
                "Custom scripts",
                "Payload generators"
            ]
        }

    def get_tools_and_techniques(self):
        return self.tools_and_techniques

    def populate_test_cases(self):
        self.test_cases = {
            "Planning": [
                "Identify critical assets",
                "Define rules of engagement"
            ],
            "Discovery": [
                "Perform network scanning",
                "Conduct OSINT"
            ],
            "Exploitation": [
                "Exploit vulnerabilities",
                "Deploy payloads"
            ],
            "Reporting": [
                "Document findings",
                "Provide remediation recommendations"
            ]
        }

    def get_test_cases(self):
        return self.test_cases

    def populate_best_practices(self):
        self.best_practices = [
            "Define clear objectives and scope",
            "Use realistic attack scenarios",
            "Maintain stealth during the assessment",
            "Provide actionable recommendations"
        ]

    def get_best_practices(self):
        return self.best_practices

    def generate_sample_data(self):
        sample_data = []
        for stage in self.stages:
            details = self.get_stage_details(stage)
            sample_data.append(f"Stage: {stage}\nDetails: {details}\n")

        for methodology in self.methodologies:
            sample_data.append(f"Methodology: {methodology}\n")

        tools_and_techniques = self.get_tools_and_techniques()
        for category, items in tools_and_techniques.items():
            sample_data.append(f"Category: {category}\nItems: {', '.join(items)}\n")

        test_cases = self.get_test_cases()
        for stage, cases in test_cases.items():
            sample_data.append(f"Stage: {stage}\nTest Cases: {', '.join(cases)}\n")

        best_practices = self.get_best_practices()
        for practice in best_practices:
            sample_data.append(f"Best Practice: {practice}\n")

        return "\n".join(sample_data)

    def generate(self):
        import random
        category = random.choice(["stage", "methodology", "tool", "technique", "test_case", "best_practice"])

        if category == "stage":
            stage = random.choice(self.stages)
            question = f"What is the purpose of the '{stage}' stage in Red Team Penetration Testing?"
            answer = self.get_stage_details(stage)
        elif category == "methodology":
            methodology = random.choice(self.methodologies)
            question = f"What is the '{methodology}' methodology in Red Team Penetration Testing?"
            answer = f"The '{methodology}' methodology involves specific approaches and techniques tailored to achieve the objectives of the Red Team Assessment."
        elif category == "tool":
            tool_category = random.choice(list(self.tools_and_techniques.keys()))
            tool = random.choice(self.tools_and_techniques[tool_category])
            question = f"What is the purpose of using '{tool}' in Red Team Penetration Testing?"
            answer = f"'{tool}' is used for various purposes in Red Team Penetration Testing, such as {tool_category.lower()}."
        elif category == "technique":
            technique_category = random.choice(list(self.tools_and_techniques.keys()))
            technique = random.choice(self.tools_and_techniques[technique_category])
            question = f"How is the '{technique}' technique applied in Red Team Penetration Testing?"
            answer = f"The '{technique}' technique is used to test security measures and identify vulnerabilities in the target environment."
        elif category == "test_case":
            stage = random.choice(list(self.test_cases.keys()))
            test_case = random.choice(self.test_cases[stage])
            question = f"What is the purpose of the test case '{test_case}' in the '{stage}' stage?"
            answer = f"This test case is used to evaluate the effectiveness of security measures related to the {stage.lower()} stage."
        else:  # best_practice
            practice = random.choice(self.best_practices)
            question = f"Why is '{practice}' considered a best practice in Red Team Penetration Testing?"
            answer = f"This best practice ensures that the Red Team Penetration Test is conducted effectively, ethically, and provides valuable results."

        return (question, answer)

# Example usage
if __name__ == "__main__":
    red_team_pen_test = RedTeamPenTestDataset()
    print("Red Team Penetration Testing Stages:", red_team_pen_test.get_stages())
    print("\nDetails of Planning Stage:", red_team_pen_test.get_stage_details("Planning"))
    print("\nMethodologies:", red_team_pen_test.get_methodologies())
    print("\nTools and Techniques:", red_team_pen_test.get_tools_and_techniques())
    print("\nTest Cases for Planning Stage:", red_team_pen_test.get_test_cases().get("Planning"))
    print("\nBest Practices:", red_team_pen_test.get_best_practices())
    print("\nSample Data:")
    print(red_team_pen_test.generate_sample_data())
    print("\nLLM Training Data Examples:")
    for _ in range(5):
        question, answer = red_team_pen_test.generate()
        print(f"\nQ: {question}")
        print(f"A: {answer}")
