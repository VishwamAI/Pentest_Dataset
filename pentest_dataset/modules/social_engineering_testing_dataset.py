# Social Engineering Testing Dataset Module

class SocialEngineeringTestingDataset:
    def __init__(self):
        self.methods = [
            "Phishing",
            "Vishing",
            "Impersonation",
            "SMiShing"
        ]
        self.technical_guidelines = {}

    def get_methods(self):
        return self.methods

    def get_method_details(self, method):
        details = {
            "Phishing": "The practice of sending emails that appear to be from reputable sources with the goal of influencing or gaining personal information.",
            "Vishing": "The practice of eliciting information or attempting to influence action via the telephone, may include tools such as phone spoofing.",
            "Impersonation": "The practice of pretexting as another person with the goal of obtaining information or access to a person, company, or computer system.",
            "SMiShing": "The act of using mobile phone text messages (SMS) to influence victims into immediate action, such as downloading malware or visiting malicious websites."
        }
        return details.get(method, "Details not available.")

    def get_technical_guidelines(self):
        self.technical_guidelines = {
            "Psychological Principles": [
                "Authority",
                "Social Proof",
                "Liking",
                "Scarcity",
                "Commitment and Consistency",
                "Reciprocity"
            ],
            "Information Gathering Techniques": [
                "Open-Source Intelligence (OSINT)",
                "Social Media Analysis",
                "Dumpster Diving",
                "Pretexting",
                "Elicitation"
            ],
            "Attack Vectors": [
                "Email Phishing",
                "Spear Phishing",
                "Whaling",
                "Voice Phishing (Vishing)",
                "SMS Phishing (SMiShing)",
                "Physical Impersonation",
                "Baiting",
                "Tailgating"
            ],
            "Tools and Technologies": [
                "Email Spoofing Tools",
                "VoIP Systems",
                "Social Media Platforms",
                "Custom Phishing Websites",
                "Social Engineering Toolkits (e.g., SET)"
            ],
            "Defense Strategies": [
                "Security Awareness Training",
                "Multi-Factor Authentication",
                "Email Filtering and Analysis",
                "Phone System Security",
                "Physical Security Measures",
                "Incident Response Planning"
            ]
        }
        return self.technical_guidelines

    def generate_sample_data(self):
        sample_data = []
        for method in self.methods:
            details = self.get_method_details(method)
            sample_data.append(f"Method: {method}\nDetails: {details}\n")

        guidelines = self.get_technical_guidelines()
        for category, items in guidelines.items():
            sample_data.append(f"Category: {category}\nItems: {', '.join(items)}\n")

        return "\n".join(sample_data)

# Example usage
if __name__ == "__main__":
    se_testing = SocialEngineeringTestingDataset()
    print("Social Engineering Testing Methods:", se_testing.get_methods())
    print("\nDetails of Phishing:", se_testing.get_method_details("Phishing"))
    print("\nTechnical Guidelines:", se_testing.get_technical_guidelines())
    print("\nSample Data:")
    print(se_testing.generate_sample_data())
