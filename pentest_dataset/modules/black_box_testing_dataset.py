# Black Box Testing Dataset Module

import random

class BlackBoxTestingDataset:
    def __init__(self):
        self.definition = "Black-box testing is a method of software testing that examines the functionality of an application without peering into its internal structures or workings."
        self.test_procedures = [
            "Equivalence partitioning",
            "Boundary value analysis",
            "Decision table testing",
            "State transition testing",
            "Use case testing"
        ]
        self.test_design_techniques = [
            "Error guessing",
            "Exploratory testing",
            "All-pairs testing",
            "Fuzz testing"
        ]
        self.test_coverage = [
            "Function coverage",
            "Statement coverage",
            "Decision coverage",
            "Branch coverage"
        ]
        self.effectiveness = [
            "Detects external errors and inconsistencies",
            "Verifies system behavior from a user's perspective",
            "Identifies issues in system integration and end-to-end workflows"
        ]
        self.relation_to_pentesting = "Black-box testing is often used in penetration testing to simulate real-world attacks and identify vulnerabilities from an external perspective."
        self.technical_guidelines = {}

    def get_definition(self):
        return self.definition

    def get_test_procedures(self):
        return self.test_procedures

    def get_test_design_techniques(self):
        return self.test_design_techniques

    def get_test_coverage(self):
        return self.test_coverage

    def get_effectiveness(self):
        return self.effectiveness

    def get_relation_to_pentesting(self):
        return self.relation_to_pentesting

    def get_technical_guidelines(self):
        self.technical_guidelines = {
            "Tools": [
                "Selenium",
                "JMeter",
                "Postman",
                "SoapUI",
                "TestComplete"
            ],
            "Techniques": [
                "Input validation testing",
                "Output validation testing",
                "Error handling testing",
                "Interface testing",
                "Performance testing"
            ],
            "Best Practices": [
                "Define clear test objectives",
                "Create comprehensive test cases",
                "Use a variety of test design techniques",
                "Maintain test case independence",
                "Regularly update test cases"
            ]
        }
        return self.technical_guidelines

    def generate_sample_data(self):
        sample_data = []
        sample_data.append(f"Definition: {self.get_definition()}\n")
        sample_data.append(f"Test Procedures: {', '.join(self.get_test_procedures())}\n")
        sample_data.append(f"Test Design Techniques: {', '.join(self.get_test_design_techniques())}\n")
        sample_data.append(f"Test Coverage: {', '.join(self.get_test_coverage())}\n")
        sample_data.append(f"Effectiveness: {', '.join(self.get_effectiveness())}\n")
        sample_data.append(f"Relation to Penetration Testing: {self.get_relation_to_pentesting()}\n")

        guidelines = self.get_technical_guidelines()
        for category, items in guidelines.items():
            sample_data.append(f"{category}: {', '.join(items)}\n")

        return "\n".join(sample_data)

    def generate(self):
        categories = ["definition", "test_procedure", "test_design_technique", "test_coverage", "effectiveness", "relation_to_pentesting", "tool", "technique", "best_practice"]
        category = random.choice(categories)

        if category == "definition":
            question = "What is black-box testing?"
            answer = self.get_definition()
        elif category == "test_procedure":
            procedure = random.choice(self.test_procedures)
            question = f"What is the purpose of {procedure} in black-box testing?"
            answer = f"{procedure} is a test procedure used in black-box testing to evaluate specific aspects of the software's functionality."
        elif category == "test_design_technique":
            technique = random.choice(self.test_design_techniques)
            question = f"How is {technique} applied in black-box testing?"
            answer = f"{technique} is a test design technique used in black-box testing to create effective test cases and scenarios."
        elif category == "test_coverage":
            coverage = random.choice(self.test_coverage)
            question = f"What does {coverage} measure in black-box testing?"
            answer = f"{coverage} is a measure of test coverage in black-box testing, indicating the extent to which the software has been tested."
        elif category == "effectiveness":
            effect = random.choice(self.effectiveness)
            question = "What is one of the key benefits of black-box testing?"
            answer = effect
        elif category == "relation_to_pentesting":
            question = "How is black-box testing related to penetration testing?"
            answer = self.get_relation_to_pentesting()
        elif category == "tool":
            tool = random.choice(self.get_technical_guidelines()["Tools"])
            question = f"What is the purpose of using {tool} in black-box testing?"
            answer = f"{tool} is a tool commonly used in black-box testing to automate and streamline the testing process."
        elif category == "technique":
            technique = random.choice(self.get_technical_guidelines()["Techniques"])
            question = f"What is the importance of {technique} in black-box testing?"
            answer = f"{technique} is an important technique in black-box testing to ensure thorough evaluation of the software's functionality."
        else:  # best_practice
            practice = random.choice(self.get_technical_guidelines()["Best Practices"])
            question = f"Why is '{practice}' considered a best practice in black-box testing?"
            answer = f"'{practice}' is a best practice in black-box testing because it helps improve the effectiveness and efficiency of the testing process."

        return (question, answer)

# Example usage
if __name__ == "__main__":
    black_box_testing = BlackBoxTestingDataset()
    print("Black Box Testing Definition:", black_box_testing.get_definition())
    print("\nTest Procedures:", black_box_testing.get_test_procedures())
    print("\nTest Design Techniques:", black_box_testing.get_test_design_techniques())
    print("\nTest Coverage:", black_box_testing.get_test_coverage())
    print("\nEffectiveness:", black_box_testing.get_effectiveness())
    print("\nRelation to Penetration Testing:", black_box_testing.get_relation_to_pentesting())
    print("\nTechnical Guidelines:", black_box_testing.get_technical_guidelines())
    print("\nSample Data:")
    print(black_box_testing.generate_sample_data())
    print("\nLLM Training Data Examples:")
    for _ in range(5):
        question, answer = black_box_testing.generate()
        print(f"\nQ: {question}")
        print(f"A: {answer}")
